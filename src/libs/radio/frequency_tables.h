#pragma once
#include <cstddef>
#include <cstdint>
#include "channel_bank.h"

namespace frequency_tables {

// Структура с данными по банку частот
struct FrequencyBank {
  const float* rx;           // массив приёмных частот
  const float* tx;           // массив передающих частот
  std::size_t size;          // количество каналов в банке
  const char* description;   // текстовое описание банка
};

inline constexpr std::size_t EAST_BANK_SIZE = 10;
inline constexpr float RX_EAST[EAST_BANK_SIZE] = {
    251.900F, 252.000F, 253.800F, 253.700F, 257.000F,
    257.100F, 256.850F, 258.650F, 262.225F, 262.325F};
inline constexpr float TX_EAST[EAST_BANK_SIZE] = {
    292.900F, 293.100F, 296.000F, 294.700F, 297.675F,
    295.650F, 297.850F, 299.650F, 295.825F, 295.925F};

inline constexpr std::size_t WEST_BANK_SIZE = 10;
inline constexpr float RX_WEST[WEST_BANK_SIZE] = {
    250.900F, 252.050F, 253.850F, 262.175F, 267.050F,
    255.550F, 251.950F, 257.825F, 260.125F, 252.400F};
inline constexpr float TX_WEST[WEST_BANK_SIZE] = {
    308.300F, 293.050F, 294.850F, 295.775F, 308.050F,
    296.550F, 292.950F, 297.075F, 310.125F, 309.700F};

inline constexpr std::size_t TEST_BANK_SIZE = 10;
inline constexpr float RX_TEST[TEST_BANK_SIZE] = {
    250.000F, 260.000F, 270.000F, 280.000F, 290.000F,
    300.000F, 310.000F, 433.000F, 434.000F, 446.000F};
inline constexpr float TX_TEST[TEST_BANK_SIZE] = {
    250.000F, 260.000F, 270.000F, 280.000F, 290.000F,
    300.000F, 310.000F, 433.000F, 434.000F, 446.000F};

inline constexpr std::size_t ALL_BANK_SIZE = 167;
inline constexpr float RX_ALL[ALL_BANK_SIZE] = {
    243.625F, 243.625F, 243.800F, 244.135F, 244.275F, 245.200F, 245.800F, 245.850F, 245.950F, 247.450F,
    248.750F, 248.825F, 249.375F, 249.400F, 249.450F, 249.450F, 249.490F, 249.530F, 249.850F, 249.850F,
    249.890F, 249.930F, 250.090F, 250.900F, 251.275F, 251.575F, 251.600F, 251.850F, 251.900F, 251.950F,
    252.000F, 252.050F, 252.150F, 252.200F, 252.400F, 252.450F, 252.500F, 252.550F, 252.625F, 253.550F,
    253.600F, 253.650F, 253.700F, 253.750F, 253.800F, 253.850F, 253.850F, 253.900F, 254.000F, 254.730F,
    254.775F, 254.830F, 255.250F, 255.350F, 255.400F, 255.450F, 255.550F, 255.550F, 255.775F, 256.450F,
    256.600F, 256.850F, 256.900F, 256.950F, 257.000F, 257.050F, 257.100F, 257.150F, 257.150F, 257.200F,
    257.250F, 257.300F, 257.350F, 257.500F, 257.700F, 257.775F, 257.825F, 257.900F, 258.150F, 258.350F,
    258.450F, 258.500F, 258.550F, 258.650F, 259.000F, 259.050F, 259.975F, 260.025F, 260.075F, 260.125F,
    260.175F, 260.375F, 260.425F, 260.425F, 260.475F, 260.525F, 260.550F, 260.575F, 260.625F, 260.675F,
    260.675F, 260.725F, 260.900F, 261.100F, 261.100F, 261.200F, 262.000F, 262.040F, 262.075F, 262.125F,
    262.175F, 262.175F, 262.225F, 262.275F, 262.275F, 262.325F, 262.375F, 262.425F, 263.450F, 263.500F,
    263.575F, 263.625F, 263.625F, 263.675F, 263.725F, 263.725F, 263.775F, 263.825F, 263.875F, 263.925F,
    265.250F, 265.350F, 265.400F, 265.450F, 265.500F, 265.550F, 265.675F, 265.850F, 266.750F, 266.850F,
    266.900F, 266.950F, 267.050F, 267.050F, 267.100F, 267.150F, 267.200F, 267.250F, 267.400F, 267.875F,
    267.950F, 268.000F, 268.025F, 268.050F, 268.100F, 268.150F, 268.200F, 268.250F, 268.300F, 268.350F,
    268.400F, 268.450F, 269.700F, 269.750F, 269.800F, 269.850F, 269.950F};
inline constexpr float TX_ALL[ALL_BANK_SIZE] = {
    316.725F, 300.400F, 298.200F, 296.075F, 300.250F, 312.850F, 298.650F, 314.230F, 299.400F, 298.800F,
    306.900F, 294.375F, 316.975F, 300.975F, 299.000F, 312.750F, 313.950F, 318.280F, 316.250F, 298.830F,
    300.500F, 308.750F, 312.600F, 308.300F, 296.500F, 308.450F, 298.225F, 292.850F, 292.900F, 292.950F,
    293.100F, 293.050F, 293.150F, 299.150F, 309.700F, 309.750F, 309.800F, 309.850F, 309.925F, 294.550F,
    295.950F, 294.650F, 294.700F, 294.750F, 296.000F, 294.850F, 294.850F, 307.500F, 298.630F, 312.550F,
    310.800F, 296.200F, 302.425F, 296.350F, 296.400F, 296.450F, 296.550F, 296.550F, 309.300F, 313.850F,
    305.950F, 297.850F, 296.100F, 297.950F, 297.675F, 298.050F, 295.650F, 298.150F, 298.150F, 308.800F,
    309.475F, 309.725F, 307.200F, 311.350F, 316.150F, 311.375F, 297.075F, 298.000F, 293.200F, 299.350F,
    299.450F, 299.500F, 299.550F, 299.650F, 317.925F, 317.975F, 310.050F, 310.225F, 310.275F, 310.125F,
    310.325F, 292.975F, 297.575F, 294.025F, 294.075F, 294.125F, 296.775F, 294.175F, 294.225F, 294.475F,
    294.275F, 294.325F, 313.900F, 298.380F, 298.700F, 294.950F, 314.200F, 307.075F, 306.975F, 295.725F,
    297.025F, 295.775F, 295.825F, 295.875F, 300.275F, 295.925F, 295.975F, 296.025F, 311.400F, 309.875F,
    297.175F, 297.225F, 297.225F, 297.275F, 297.325F, 297.325F, 297.375F, 297.425F, 297.475F, 297.525F,
    306.250F, 306.350F, 294.425F, 306.450F, 302.525F, 306.550F, 306.675F, 306.850F, 316.575F, 307.850F,
    297.625F, 307.950F, 308.050F, 308.050F, 308.100F, 308.150F, 308.200F, 308.250F, 294.900F, 310.375F,
    310.450F, 310.475F, 309.025F, 310.550F, 310.600F, 309.150F, 296.050F, 309.250F, 309.300F, 309.350F,
    295.900F, 309.450F, 309.925F, 310.750F, 310.025F, 310.850F, 310.950F};

inline constexpr std::size_t HOME_BANK_SIZE = 7;
inline constexpr float RX_HOME[HOME_BANK_SIZE] = {
    263.450F, 257.700F, 257.200F, 256.450F, 267.250F, 250.090F, 249.850F};
inline constexpr float TX_HOME[HOME_BANK_SIZE] = {
    311.400F, 316.150F, 308.800F, 398.800F, 308.250F, 312.600F, 298.830F};

inline constexpr FrequencyBank BANKS[] = {
    {RX_EAST, TX_EAST, EAST_BANK_SIZE, "Восточный банк: основной набор частот восточного сегмента"},
    {RX_WEST, TX_WEST, WEST_BANK_SIZE, "Западный банк: основной набор частот западного сегмента"},
    {RX_TEST, TX_TEST, TEST_BANK_SIZE, "Тестовый банк: синтетические частоты для отладки"},
    {RX_ALL, TX_ALL, ALL_BANK_SIZE, "Полный банк: агрегированный список частот из референса"},
    {RX_HOME, TX_HOME, HOME_BANK_SIZE, "Домашний банк: сокращённый набор для базового использования"}
};

inline constexpr const FrequencyBank& getBank(ChannelBank bank) {
  return BANKS[static_cast<std::size_t>(bank)];
}

} // namespace frequency_tables

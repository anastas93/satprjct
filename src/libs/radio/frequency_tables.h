#pragma once
#include <cstddef>
#include <cstdint>
#include "channel_bank.h"

namespace frequency_tables {

// Структура с данными по банку частот
struct FrequencyBank {
  const float* rx;           // массив приёмных частот
  const float* tx;           // массив передающих частот
  std::size_t size;          // количество каналов в банке
  const char* description;   // текстовое описание банка
};

inline constexpr std::size_t EAST_BANK_SIZE = 10;
inline constexpr float RX_EAST[EAST_BANK_SIZE] = {
    251.900F, 252.000F, 253.800F, 253.700F, 257.000F,
    257.100F, 256.850F, 258.650F, 262.225F, 262.325F};
inline constexpr float TX_EAST[EAST_BANK_SIZE] = {
    292.900F, 293.100F, 296.000F, 294.700F, 297.675F,
    295.650F, 297.850F, 299.650F, 295.825F, 295.925F};

inline constexpr std::size_t WEST_BANK_SIZE = 10;
inline constexpr float RX_WEST[WEST_BANK_SIZE] = {
    250.900F, 252.050F, 253.850F, 262.175F, 267.050F,
    255.550F, 251.950F, 257.825F, 260.125F, 252.400F};
inline constexpr float TX_WEST[WEST_BANK_SIZE] = {
    308.300F, 293.050F, 294.850F, 295.775F, 308.050F,
    296.550F, 292.950F, 297.075F, 310.125F, 309.700F};

inline constexpr std::size_t TEST_BANK_SIZE = 10;
inline constexpr float RX_TEST[TEST_BANK_SIZE] = {
    250.000F, 260.000F, 270.000F, 280.000F, 290.000F,
    300.000F, 310.000F, 433.000F, 434.000F, 446.000F};
inline constexpr float TX_TEST[TEST_BANK_SIZE] = {
    250.000F, 260.000F, 270.000F, 280.000F, 290.000F,
    300.000F, 310.000F, 433.000F, 434.000F, 446.000F};

inline constexpr std::size_t ALL_BANK_SIZE = 309;
inline constexpr float RX_ALL[ALL_BANK_SIZE] = {
    243.625F, 243.625F, 243.8F, 244.135F, 244.275F, 245.2F, 245.8F, 245.85F, 245.95F, 247.45F,
    248.75F, 248.825F, 249.375F, 249.4F, 249.45F, 249.45F, 249.49F, 249.53F, 249.85F, 249.85F,
    249.89F, 249.93F, 250.09F, 250.9F, 251.275F, 251.575F, 251.6F, 251.85F, 251.9F, 251.95F,
    252.0F, 252.05F, 252.15F, 252.2F, 252.4F, 252.45F, 252.5F, 252.55F, 252.625F, 253.55F,
    253.6F, 253.65F, 253.7F, 253.75F, 253.8F, 253.85F, 253.85F, 253.9F, 254.0F, 254.73F,
    254.775F, 254.83F, 255.25F, 255.35F, 255.4F, 255.45F, 255.55F, 255.55F, 255.775F, 256.45F,
    256.6F, 256.85F, 256.9F, 256.95F, 257.0F, 257.05F, 257.1F, 257.15F, 257.2F, 257.25F,
    257.3F, 257.35F, 257.5F, 257.7F, 257.775F, 257.825F, 257.9F, 258.15F, 258.35F, 258.45F,
    258.5F, 258.55F, 258.65F, 259.0F, 259.05F, 259.975F, 260.025F, 260.075F, 260.125F, 260.175F,
    260.375F, 260.425F, 260.425F, 260.475F, 260.525F, 260.55F, 260.575F, 260.625F, 260.675F, 260.675F,
    260.725F, 260.9F, 261.1F, 261.1F, 261.2F, 262.0F, 262.04F, 262.075F, 262.125F, 262.175F,
    262.175F, 262.225F, 262.275F, 262.275F, 262.325F, 262.375F, 262.425F, 263.45F, 263.5F, 263.575F,
    263.625F, 263.675F, 263.725F, 263.775F, 263.825F, 263.875F, 263.925F, 265.25F, 265.35F, 265.4F,
    265.45F, 265.5F, 265.55F, 265.675F, 265.85F, 266.75F, 266.85F, 266.9F, 266.95F, 267.05F,
    267.1F, 267.15F, 267.2F, 267.25F, 267.4F, 267.875F, 267.95F, 268.0F, 268.025F, 268.05F,
    268.1F, 268.15F, 268.2F, 268.25F, 268.3F, 268.35F, 268.4F, 268.45F, 269.7F, 269.75F,
    269.8F, 269.85F, 269.95F, 243.915F, 243.935F, 243.945F, 243.955F, 243.965F, 243.975F, 243.995F,
    244.0F, 244.015F, 244.04F, 244.05F, 244.06F, 244.065F, 244.09F, 244.155F, 244.165F, 244.175F,
    244.185F, 244.195F, 244.205F, 244.225F, 244.275F, 244.975F, 245.2F, 245.8F, 245.95F, 246.7F,
    248.45F, 248.845F, 248.855F, 248.865F, 248.875F, 248.885F, 248.895F, 248.905F, 248.915F, 248.945F,
    248.955F, 248.965F, 248.99F, 249.0F, 249.05F, 249.1F, 249.115F, 249.125F, 249.235F, 249.245F,
    249.25F, 249.255F, 249.265F, 249.275F, 249.285F, 249.295F, 249.305F, 249.315F, 249.325F, 249.335F,
    249.345F, 249.355F, 249.49F, 249.53F, 249.56F, 249.58F, 249.8F, 250.35F, 250.7F, 252.2F,
    252.4F, 252.55F, 252.625F, 252.75F, 253.3F, 253.6F, 253.675F, 253.725F, 253.825F, 253.95F,
    253.975F, 254.5F, 254.53F, 254.625F, 254.775F, 255.1F, 255.25F, 255.275F, 255.65F, 255.675F,
    255.85F, 256.975F, 257.075F, 257.14F, 257.175F, 257.19F, 257.25F, 257.45F, 257.6F, 257.75F,
    258.225F, 258.6F, 258.7F, 259.05F, 259.975F, 260.175F, 260.25F, 260.375F, 260.45F, 260.5F,
    260.55F, 260.65F, 260.9F, 260.95F, 261.4F, 261.575F, 261.6F, 261.625F, 261.65F, 261.675F,
    261.7F, 261.725F, 261.775F, 261.825F, 261.85F, 261.875F, 261.9F, 261.925F, 261.95F, 261.975F,
    262.025F, 262.15F, 262.3F, 263.4F, 263.5F, 263.725F, 263.75F, 263.8F, 265.325F, 265.375F,
    265.475F, 266.975F, 267.575F, 267.95F, 268.0F, 268.05F, 268.1F, 268.45F, 269.725F
};
inline constexpr float TX_ALL[ALL_BANK_SIZE] = {
    316.725F, 300.4F, 298.2F, 296.075F, 300.25F, 312.85F, 298.65F, 314.23F, 299.4F, 298.8F,
    306.9F, 294.375F, 316.975F, 300.975F, 299.0F, 312.75F, 313.95F, 318.28F, 316.25F, 298.83F,
    300.5F, 308.75F, 312.6F, 308.3F, 296.5F, 308.45F, 298.225F, 292.85F, 292.9F, 292.95F,
    293.1F, 293.05F, 293.15F, 299.15F, 309.7F, 309.75F, 309.8F, 309.85F, 309.925F, 294.55F,
    295.95F, 294.65F, 294.7F, 294.75F, 296.0F, 294.85F, 294.85F, 307.5F, 298.63F, 312.55F,
    310.8F, 296.2F, 302.425F, 296.35F, 296.4F, 296.45F, 296.55F, 296.55F, 309.3F, 313.85F,
    305.95F, 297.85F, 296.1F, 297.95F, 297.675F, 298.05F, 295.65F, 298.15F, 308.8F, 309.475F,
    309.725F, 307.2F, 311.35F, 316.15F, 311.375F, 297.075F, 298.0F, 293.2F, 299.35F, 299.45F,
    299.5F, 299.55F, 299.65F, 317.925F, 317.975F, 310.05F, 310.225F, 310.275F, 310.125F, 310.325F,
    292.975F, 297.575F, 294.025F, 294.075F, 294.125F, 296.775F, 294.175F, 294.225F, 294.475F, 294.275F,
    294.325F, 313.9F, 298.38F, 298.7F, 294.95F, 314.2F, 307.075F, 306.975F, 295.725F, 297.025F,
    295.775F, 295.825F, 295.875F, 300.275F, 295.925F, 295.975F, 296.025F, 311.4F, 309.875F, 297.175F,
    297.225F, 297.275F, 297.325F, 297.375F, 297.425F, 297.475F, 297.525F, 306.25F, 306.35F, 294.425F,
    306.45F, 302.525F, 306.55F, 306.675F, 306.85F, 316.575F, 307.85F, 297.625F, 307.95F, 308.05F,
    308.1F, 308.15F, 308.2F, 308.25F, 294.9F, 310.375F, 310.45F, 310.475F, 309.025F, 310.55F,
    310.6F, 309.15F, 296.05F, 309.25F, 309.3F, 309.35F, 295.9F, 309.45F, 309.925F, 310.75F,
    310.025F, 310.85F, 310.95F, 317.015F, 317.035F, 317.045F, 317.055F, 317.065F, 317.075F, 317.095F,
    317.1F, 317.115F, 317.23F, 317.24F, 317.21F, 317.165F, 317.19F, 317.255F, 317.265F, 317.275F,
    317.285F, 317.295F, 317.305F, 316.775F, 301.025F, 293.0F, 314.45F, 309.41F, 313.0F, 297.7F,
    298.95F, 302.445F, 302.455F, 302.465F, 302.475F, 302.485F, 302.495F, 302.505F, 302.515F, 302.545F,
    302.555F, 302.565F, 302.525F, 302.6F, 302.65F, 302.7F, 302.715F, 302.725F, 302.835F, 302.845F,
    302.85F, 302.855F, 302.865F, 302.875F, 302.885F, 302.895F, 302.905F, 302.915F, 302.925F, 302.935F,
    302.945F, 302.955F, 312.85F, 298.8F, 298.76F, 298.74F, 295.0F, 294.875F, 295.05F, 315.25F,
    293.275F, 293.2F, 311.45F, 306.3F, 307.8F, 316.25F, 294.425F, 294.05F, 294.05F, 312.8F,
    294.975F, 308.1F, 308.13F, 295.625F, 317.825F, 318.175F, 296.25F, 297.4F, 296.65F, 296.675F,
    296.85F, 316.85F, 297.45F, 298.14F, 298.125F, 298.14F, 316.9F, 305.95F, 305.95F, 308.4F,
    299.3F, 294.825F, 312.9F, 307.45F, 309.7F, 309.875F, 314.4F, 293.975F, 297.575F, 317.13F,
    293.8F, 297.1F, 313.05F, 299.4F, 316.55F, 295.175F, 306.975F, 295.225F, 309.65F, 295.275F,
    296.525F, 307.075F, 307.075F, 295.425F, 300.275F, 295.475F, 316.825F, 295.525F, 294.625F, 294.0F,
    316.65F, 295.75F, 295.9F, 316.4F, 315.2F, 298.525F, 317.15F, 297.25F, 295.1F, 295.2F,
    295.5F, 297.5F, 297.625F, 310.075F, 310.5F, 309.95F, 293.325F, 297.15F, 295.15F
};
inline constexpr std::size_t HOME_BANK_SIZE = 7;
inline constexpr float RX_HOME[HOME_BANK_SIZE] = {
    263.450F, 257.700F, 257.200F, 256.450F, 267.250F, 250.090F, 249.850F};
inline constexpr float TX_HOME[HOME_BANK_SIZE] = {
    311.400F, 316.150F, 308.800F, 398.800F, 308.250F, 312.600F, 298.830F};

inline constexpr FrequencyBank BANKS[] = {
    {RX_EAST, TX_EAST, EAST_BANK_SIZE, "Восточный банк: основной набор частот восточного сегмента"},
    {RX_WEST, TX_WEST, WEST_BANK_SIZE, "Западный банк: основной набор частот западного сегмента"},
    {RX_TEST, TX_TEST, TEST_BANK_SIZE, "Тестовый банк: синтетические частоты для отладки"},
    {RX_ALL, TX_ALL, ALL_BANK_SIZE, "Полный банк: агрегированный список частот из референса"},
    {RX_HOME, TX_HOME, HOME_BANK_SIZE, "Домашний банк: сокращённый набор для базового использования"}
};

inline constexpr const FrequencyBank& getBank(ChannelBank bank) {
  return BANKS[static_cast<std::size_t>(bank)];
}

} // namespace frequency_tables
